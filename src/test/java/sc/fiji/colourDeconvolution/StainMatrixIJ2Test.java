package sc.fiji.colourDeconvolution;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import java.io.IOException;

import org.junit.Test;

import ij.ImagePlus;
import ij.plugin.ImageCalculator;
import io.scif.services.DatasetIOService;
import net.imagej.Dataset;
import net.imagej.DefaultDataset;
import net.imagej.ImageJ;
import net.imagej.ImgPlus;
import net.imglib2.type.numeric.integer.UnsignedByteType;

public class StainMatrixIJ2Test {
    @Test
    public void testColourDeconvolutionFor2Colours() throws IOException {
        ImageJ ij = new ImageJ();
        DatasetIOService datasetIOService = ij.scifio().datasetIO();
        Dataset dataset = datasetIOService.open("src/test/resources/2ColourImage.tif");
        @SuppressWarnings("unchecked")
        ImgPlus<UnsignedByteType> imagePlus = (ImgPlus<UnsignedByteType>) dataset.getImgPlus();
        StainMatrixIJ2 stainMatrix = new StainMatrixIJ2();
        stainMatrix.init("test stain", 0.66645944, 0.6332006, 0.39355922, 0.25378, 0.737415, 0.6259511, 0, 0, 0);
        ImgPlus<UnsignedByteType>[] computed = stainMatrix.compute(imagePlus);
        assertEquals("We expect there to be 3 result images", 3, computed.length);
        datasetIOService.save(new DefaultDataset(datasetIOService.context(), computed[0]), "target/ij2-outputDeconvoluted1.tif");
        datasetIOService.save(new DefaultDataset(datasetIOService.context(), computed[1]), "target/ij2-outputDeconvoluted2.tif");
        datasetIOService.save(new DefaultDataset(datasetIOService.context(), computed[2]), "target/ij2-outputDeconvoluted3.tif");
        ImagePlus expected1 = new ImagePlus("src/test/resources/expectedDeconvoluted1.tif");
        new ImageCalculator().run("Difference", expected1, new ImagePlus("target/ij2-outputDeconvoluted1.tif"));
        assertArrayEquals("Difference between 2 images should be 0 at every point.",
                new byte[6980 * 1646], (byte[]) expected1.getImageStack().getPixels(1));
    }

    @Test
    public void testColourDeconvolutionOnSmallImage() throws IOException {
        ImageJ ij = new ImageJ();
        DatasetIOService datasetIOService = ij.scifio().datasetIO();
        Dataset dataset = datasetIOService.open("src/test/resources/small2ColourImage.tif");
        @SuppressWarnings("unchecked")
        ImgPlus<UnsignedByteType> imagePlus = (ImgPlus<UnsignedByteType>) dataset.getImgPlus();
        StainMatrixIJ2 stainMatrix = new StainMatrixIJ2();
        stainMatrix.init("test stain", 0.66645944, 0.6332006, 0.39355922, 0.25378, 0.737415, 0.6259511, 0, 0, 0);
        ImgPlus<UnsignedByteType>[] computed = stainMatrix.compute(imagePlus);

        assertEquals("We expect there to be 3 result images", 3, computed.length);

        ImagePlus expected1 = new ImagePlus("src/test/resources/expectedSmallDeconvoluted1.tif");
        datasetIOService.save(new DefaultDataset(datasetIOService.context(), computed[0]), "target/ij2-outputSmallDeconvoluted1.tif");
        new ImageCalculator().run("Difference", expected1, new ImagePlus("target/ij2-outputSmallDeconvoluted1.tif"));
        assertArrayEquals(new byte[30 * 30], (byte[]) expected1.getImageStack().getPixels(1));

        ImagePlus expected2 = new ImagePlus("src/test/resources/expectedSmallDeconvoluted2.tif");
        datasetIOService.save(new DefaultDataset(datasetIOService.context(), computed[1]), "target/ij2-outputSmallDeconvoluted2.tif");
        new ImageCalculator().run("Difference", expected2, new ImagePlus("target/ij2-outputSmallDeconvoluted2.tif"));
        assertArrayEquals(new byte[30 * 30], (byte[]) expected2.getImageStack().getPixels(1));

        ImagePlus expected3 = new ImagePlus("src/test/resources/expectedSmallDeconvoluted3.tif");
        datasetIOService.save(new DefaultDataset(datasetIOService.context(), computed[2]), "target/ij2-outputSmallDeconvoluted3.tif");
        new ImageCalculator().run("Difference", expected3, new ImagePlus("target/ij2-outputSmallDeconvoluted3.tif"));
        assertArrayEquals(new byte[30 * 30], (byte[]) expected3.getImageStack().getPixels(1));
    }

    /**
     * This test is pretty extensive, but it helps to see the distribution of the numbers
     */
    @Test
    public void testLogify() {
        StainMatrixIJ2 stainMatrix = new StainMatrixIJ2();
        double[] expectedValues = new double[256];
        expectedValues[0] = 255.0;
        expectedValues[1] = 223.10248608420363;
        expectedValues[2] = 204.44363657723153;
        expectedValues[3] = 191.2049721684073;
        expectedValues[4] = 180.9362662818518;
        expectedValues[5] = 172.54612266143513;
        expectedValues[6] = 165.45235730708814;
        expectedValues[7] = 159.30745825261087;
        expectedValues[8] = 153.887273154463;
        expectedValues[9] = 149.0387523660554;
        expectedValues[10] = 144.65273180377085;
        expectedValues[11] = 140.64860874563877;
        expectedValues[12] = 136.9651725960289;
        expectedValues[13] = 133.55484339129174;
        expectedValues[14] = 130.3799028590833;
        expectedValues[15] = 127.4099443368145;
        expectedValues[16] = 124.62009714091671;
        expectedValues[17] = 121.98975923866662;
        expectedValues[18] = 119.50167302663894;
        expectedValues[19] = 117.14123845025907;
        expectedValues[20] = 114.89599388431964;
        expectedValues[21] = 112.75521788797445;
        expectedValues[22] = 110.70961955770437;
        expectedValues[23] = 108.75109482984237;
        expectedValues[24] = 106.87253256370359;
        expectedValues[25] = 105.06765868023253;
        expectedValues[26] = 103.3309097316945;
        expectedValues[27] = 101.6573294754954;
        expectedValues[28] = 100.04248360524396;
        expectedValues[29] = 98.48238894328692;
        expectedValues[30] = 96.9734542478476;
        expectedValues[31] = 95.51243042101814;
        expectedValues[32] = 94.09636838100234;
        expectedValues[33] = 92.72258322512033;
        expectedValues[34] = 91.38862358893991;
        expectedValues[35] = 90.09224532287026;
        expectedValues[36] = 88.8313887761583;
        expectedValues[37] = 87.60415911084256;
        expectedValues[38] = 86.4088091732604;
        expectedValues[39] = 85.24372453446267;
        expectedValues[40] = 84.10741037809191;
        expectedValues[41] = 82.99847996852326;
        expectedValues[42] = 81.91564447609443;
        expectedValues[43] = 80.85770397217809;
        expectedValues[44] = 79.82353943631479;
        expectedValues[45] = 78.81210564190799;
        expectedValues[46] = 77.82242480708516;
        expectedValues[47] = 76.853580914046;
        expectedValues[48] = 75.90471461417624;
        expectedValues[49] = 74.9750186479072;
        expectedValues[50] = 74.06373371814821;
        expectedValues[51] = 73.17014476443615;
        expectedValues[52] = 72.29357759199566;
        expectedValues[53] = 71.43339581589812;
        expectedValues[54] = 70.58899808562263;
        expectedValues[55] = 69.759815559699;
        expectedValues[56] = 68.94530960387044;
        expectedValues[57] = 68.14496968944758;
        expectedValues[58] = 67.35831147131786;
        expectedValues[59] = 66.58487502749054;
        expectedValues[60] = 65.8242232441547;
        expectedValues[61] = 65.07594033205122;
        expectedValues[62] = 64.33963046155112;
        expectedValues[63] = 63.61491650522176;
        expectedValues[64] = 62.90143887788071;
        expectedValues[65] = 62.198854465205955;
        expectedValues[66] = 61.50683563291124;
        expectedValues[67] = 60.825069309323965;
        expectedValues[68] = 60.153256134935866;
        expectedValues[69] = 59.49110967314354;
        expectedValues[70] = 58.838355676970735;
        expectedValues[71] = 58.19473140707388;
        expectedValues[72] = 57.55998499678649;
        expectedValues[73] = 56.93387486036193;
        expectedValues[74] = 56.31616914093508;
        expectedValues[75] = 55.70664519504619;
        expectedValues[76] = 55.10508911085896;
        expectedValues[77] = 54.51129525746401;
        expectedValues[78] = 53.925065862891586;
        expectedValues[79] = 53.3462106186663;
        expectedValues[80] = 52.774546308926006;
        expectedValues[81] = 52.209896462295525;
        expectedValues[82] = 51.65209102486086;
        expectedValues[83] = 51.10096605272688;
        expectedValues[84] = 50.55636342276851;
        expectedValues[85] = 50.018130560298054;
        expectedValues[86] = 49.48612018247544;
        expectedValues[87] = 48.960190056381705;
        expectedValues[88] = 48.44020277076153;
        expectedValues[89] = 47.926025520518415;
        expectedValues[90] = 47.41752990311702;
        expectedValues[91] = 46.91459172611162;
        expectedValues[92] = 46.41709082507909;
        expectedValues[93] = 45.924910891288775;
        expectedValues[94] = 45.43793930849073;
        expectedValues[95] = 44.956066998249625;
        expectedValues[96] = 44.47918827329289;
        expectedValues[97] = 44.007200698379876;
        expectedValues[98] = 43.54000495823383;
        expectedValues[99] = 43.07750473211084;
        expectedValues[100] = 42.61960657460941;
        expectedValues[101] = 42.16621980235183;
        expectedValues[102] = 41.7172563861935;
        expectedValues[103] = 41.27263084863978;
        expectedValues[104] = 40.83226016617142;
        expectedValues[105] = 40.39606367619928;
        expectedValues[106] = 39.963962988387564;
        expectedValues[107] = 39.53588190010175;
        expectedValues[108] = 39.1117463157531;
        expectedValues[109] = 38.691484169826246;
        expectedValues[110] = 38.275025353389815;
        expectedValues[111] = 37.862301643902626;
        expectedValues[112] = 37.453246638139866;
        expectedValues[113] = 37.04779568807406;
        expectedValues[114] = 36.64588583955616;
        expectedValues[115] = 36.2474557736512;
        expectedValues[116] = 35.852445750491896;
        expectedValues[117] = 35.46079755552147;
        expectedValues[118] = 35.072454448004834;
        expectedValues[119] = 34.68736111169417;
        expectedValues[120] = 34.30546360754167;
        expectedValues[121] = 33.92670932835832;
        expectedValues[122] = 33.55104695532341;
        expectedValues[123] = 33.178426416254844;
        expectedValues[124] = 32.80879884555539;
        expectedValues[125] = 32.44211654575474;
        expectedValues[126] = 32.078332950571806;
        expectedValues[127] = 31.717402589425376;
        expectedValues[128] = 31.35928105332593;
        expectedValues[129] = 31.00392496208432;
        expectedValues[130] = 30.65129193277688;
        expectedValues[131] = 30.30134054940958;
        expectedValues[132] = 29.95403033372706;
        expectedValues[133] = 29.609321717114863;
        expectedValues[134] = 29.26717601354629;
        expectedValues[135] = 28.927555393527587;
        expectedValues[136] = 28.590422858997474;
        expectedValues[137] = 28.255742219139485;
        expectedValues[138] = 27.923478067067553;
        expectedValues[139] = 27.59359575734717;
        expectedValues[140] = 27.266061384316654;
        expectedValues[141] = 26.940841761174354;
        expectedValues[142] = 26.617904399799727;
        expectedValues[143] = 26.2972174912775;
        expectedValues[144] = 25.97874988709574;
        expectedValues[145] = 25.66247108099012;
        expectedValues[146] = 25.348351191407755;
        expectedValues[147] = 25.036360944565555;
        expectedValues[148] = 24.72647165807907;
        expectedValues[149] = 24.418655225138707;
        expectedValues[150] = 24.11288409921186;
        expectedValues[151] = 23.809131279249815;
        expectedValues[152] = 23.50737029537971;
        expectedValues[153] = 23.20757519506258;
        expectedValues[154] = 22.90972052969939;
        expectedValues[155] = 22.613781341667643;
        expectedValues[156] = 22.31973315177235;
        expectedValues[157] = 22.027551947095198;
        expectedValues[158] = 21.737214169227155;
        expectedValues[159] = 21.448696702869917;
        expectedValues[160] = 21.16197686479249;
        expectedValues[161] = 20.877032393129625;
        expectedValues[162] = 20.593841437009598;
        expectedValues[163] = 20.312382546499155;
        expectedValues[164] = 20.032634662854125;
        expectedValues[165] = 19.75457710906448;
        expectedValues[166] = 19.47818958068349;
        expectedValues[167] = 19.203452136930498;
        expectedValues[168] = 18.930345192057793;
        expectedValues[169] = 18.658849506972132;
        expectedValues[170] = 18.38894618110194;
        expectedValues[171] = 18.120616644501677;
        expectedValues[172] = 17.853842650185033;
        expectedValues[173] = 17.58860626667907;
        expectedValues[174] = 17.32488987079171;
        expectedValues[175] = 17.06267614058533;
        expectedValues[176] = 16.801948048549345;
        expectedValues[177] = 16.54268885496515;
        expectedValues[178] = 16.284882101456922;
        expectedValues[179] = 16.028511604722038;
        expectedValues[180] = 15.773561450435247;
        expectedValues[181] = 15.520015987320646;
        expectedValues[182] = 15.267859821386189;
        expectedValues[183] = 15.017077810315236;
        expectedValues[184] = 14.767655058010108;
        expectedValues[185] = 14.519576909282716;
        expectedValues[186] = 14.272828944687545;
        expectedValues[187] = 14.027396975492403;
        expectedValues[188] = 13.783267038782617;
        expectedValues[189] = 13.540425392694354;
        expectedValues[190] = 13.298858511773089;
        expectedValues[191] = 13.05855308245325;
        expectedValues[192] = 12.819495998655288;
        expectedValues[193] = 12.581674357496517;
        expectedValues[194] = 12.345075455112193;
        expectedValues[195] = 12.109686782583498;
        expectedValues[196] = 11.875496021969157;
        expectedValues[197] = 11.642491042437452;
        expectedValues[198] = 11.410659896495748;
        expectedValues[199] = 11.179990816314461;
        expectedValues[200] = 10.950472210142735;
        expectedValues[201] = 10.722092658813038;
        expectedValues[202] = 10.494840912332073;
        expectedValues[203] = 10.268705886555455;
        expectedValues[204] = 10.043676659943703;
        expectedValues[205] = 9.819742470397118;
        expectedValues[206] = 9.596892712167358;
        expectedValues[207] = 9.375116932843396;
        expectedValues[208] = 9.154404830409772;
        expectedValues[209] = 8.934746250375044;
        expectedValues[210] = 8.716131182968462;
        expectedValues[211] = 8.498549760402902;
        expectedValues[212] = 8.281992254202226;
        expectedValues[213] = 8.066449072591187;
        expectedValues[214] = 7.85191075794622;
        expectedValues[215] = 7.638367984305371;
        expectedValues[216] = 7.425811554935716;
        expectedValues[217] = 7.2142323999567255;
        expectedValues[218] = 7.003621574017993;
        expectedValues[219] = 6.7939702540298725;
        expectedValues[220] = 6.5852697369456035;
        expectedValues[221] = 6.377511437593434;
        expectedValues[222] = 6.170686886557529;
        expectedValues[223] = 5.96478772810625;
        expectedValues[224] = 5.759805718166585;
        expectedValues[225] = 5.555732722343493;
        expectedValues[226] = 5.352560713982973;
        expectedValues[227] = 5.150281772277683;
        expectedValues[228] = 4.948888080414071;
        expectedValues[229] = 4.748371923759779;
        expectedValues[230] = 4.548725688090454;
        expectedValues[231] = 4.34994185785482;
        expectedValues[232] = 4.152013014477052;
        expectedValues[233] = 3.9549318346955205;
        expectedValues[234] = 3.7586910889369496;
        expectedValues[235] = 3.563283639725093;
        expectedValues[236] = 3.3687024401230707;
        expectedValues[237] = 3.174940532208457;
        expectedValues[238] = 2.981991045580385;
        expectedValues[239] = 2.7898471958977913;
        expectedValues[240] = 2.5985022834480582;
        expectedValues[241] = 2.4079496917452907;
        expectedValues[242] = 2.218182886157494;
        expectedValues[243] = 2.029195412561938;
        expectedValues[244] = 1.840980896028041;
        expectedValues[245] = 1.6535330395270318;
        expectedValues[246] = 1.4668456226678344;
        expectedValues[247] = 1.280912500458465;
        expectedValues[248] = 1.0957276020923565;
        expectedValues[249] = 0.9112849297590061;
        expectedValues[250] = 0.72757855747836;
        expectedValues[251] = 0.5446026299583688;
        expectedValues[252] = 0.3623513614751912;
        expectedValues[253] = 0.18081903477543204;
        expectedValues[254] = -0.0;
        expectedValues[255] = -0.1801113263710012;

        for (int i = 0; i < 256; i++) {
            assertEquals(expectedValues[i], stainMatrix.logify(i), 0.00001);
        }
    }
}
